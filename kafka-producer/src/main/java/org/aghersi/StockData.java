/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.aghersi;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StockData extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8738001045361849410L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockData\",\"namespace\":\"org.aghersi\",\"fields\":[{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"open\",\"type\":[\"double\",\"null\"]},{\"name\":\"high\",\"type\":[\"double\",\"null\"]},{\"name\":\"low\",\"type\":[\"double\",\"null\"]},{\"name\":\"close\",\"type\":[\"double\",\"null\"]},{\"name\":\"adj_close\",\"type\":[\"double\",\"null\"]},{\"name\":\"volume\",\"type\":[\"double\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockData to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockData from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StockData fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence date;
  private java.lang.Double open;
  private java.lang.Double high;
  private java.lang.Double low;
  private java.lang.Double close;
  private java.lang.Double adj_close;
  private java.lang.Double volume;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockData() {}

  /**
   * All-args constructor.
   * @param date The new value for date
   * @param open The new value for open
   * @param high The new value for high
   * @param low The new value for low
   * @param close The new value for close
   * @param adj_close The new value for adj_close
   * @param volume The new value for volume
   */
  public StockData(java.lang.CharSequence date, java.lang.Double open, java.lang.Double high, java.lang.Double low, java.lang.Double close, java.lang.Double adj_close, java.lang.Double volume) {
    this.date = date;
    this.open = open;
    this.high = high;
    this.low = low;
    this.close = close;
    this.adj_close = adj_close;
    this.volume = volume;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return date;
    case 1: return open;
    case 2: return high;
    case 3: return low;
    case 4: return close;
    case 5: return adj_close;
    case 6: return volume;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: date = (java.lang.CharSequence)value$; break;
    case 1: open = (java.lang.Double)value$; break;
    case 2: high = (java.lang.Double)value$; break;
    case 3: low = (java.lang.Double)value$; break;
    case 4: close = (java.lang.Double)value$; break;
    case 5: adj_close = (java.lang.Double)value$; break;
    case 6: volume = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'open' field.
   * @return The value of the 'open' field.
   */
  public java.lang.Double getOpen() {
    return open;
  }


  /**
   * Sets the value of the 'open' field.
   * @param value the value to set.
   */
  public void setOpen(java.lang.Double value) {
    this.open = value;
  }

  /**
   * Gets the value of the 'high' field.
   * @return The value of the 'high' field.
   */
  public java.lang.Double getHigh() {
    return high;
  }


  /**
   * Sets the value of the 'high' field.
   * @param value the value to set.
   */
  public void setHigh(java.lang.Double value) {
    this.high = value;
  }

  /**
   * Gets the value of the 'low' field.
   * @return The value of the 'low' field.
   */
  public java.lang.Double getLow() {
    return low;
  }


  /**
   * Sets the value of the 'low' field.
   * @param value the value to set.
   */
  public void setLow(java.lang.Double value) {
    this.low = value;
  }

  /**
   * Gets the value of the 'close' field.
   * @return The value of the 'close' field.
   */
  public java.lang.Double getClose() {
    return close;
  }


  /**
   * Sets the value of the 'close' field.
   * @param value the value to set.
   */
  public void setClose(java.lang.Double value) {
    this.close = value;
  }

  /**
   * Gets the value of the 'adj_close' field.
   * @return The value of the 'adj_close' field.
   */
  public java.lang.Double getAdjClose() {
    return adj_close;
  }


  /**
   * Sets the value of the 'adj_close' field.
   * @param value the value to set.
   */
  public void setAdjClose(java.lang.Double value) {
    this.adj_close = value;
  }

  /**
   * Gets the value of the 'volume' field.
   * @return The value of the 'volume' field.
   */
  public java.lang.Double getVolume() {
    return volume;
  }


  /**
   * Sets the value of the 'volume' field.
   * @param value the value to set.
   */
  public void setVolume(java.lang.Double value) {
    this.volume = value;
  }

  /**
   * Creates a new StockData RecordBuilder.
   * @return A new StockData RecordBuilder
   */
  public static org.aghersi.StockData.Builder newBuilder() {
    return new org.aghersi.StockData.Builder();
  }

  /**
   * Creates a new StockData RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockData RecordBuilder
   */
  public static org.aghersi.StockData.Builder newBuilder(org.aghersi.StockData.Builder other) {
    if (other == null) {
      return new org.aghersi.StockData.Builder();
    } else {
      return new org.aghersi.StockData.Builder(other);
    }
  }

  /**
   * Creates a new StockData RecordBuilder by copying an existing StockData instance.
   * @param other The existing instance to copy.
   * @return A new StockData RecordBuilder
   */
  public static org.aghersi.StockData.Builder newBuilder(org.aghersi.StockData other) {
    if (other == null) {
      return new org.aghersi.StockData.Builder();
    } else {
      return new org.aghersi.StockData.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockData instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockData>
    implements org.apache.avro.data.RecordBuilder<StockData> {

    private java.lang.CharSequence date;
    private java.lang.Double open;
    private java.lang.Double high;
    private java.lang.Double low;
    private java.lang.Double close;
    private java.lang.Double adj_close;
    private java.lang.Double volume;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.aghersi.StockData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.open)) {
        this.open = data().deepCopy(fields()[1].schema(), other.open);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.high)) {
        this.high = data().deepCopy(fields()[2].schema(), other.high);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.low)) {
        this.low = data().deepCopy(fields()[3].schema(), other.low);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.close)) {
        this.close = data().deepCopy(fields()[4].schema(), other.close);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.adj_close)) {
        this.adj_close = data().deepCopy(fields()[5].schema(), other.adj_close);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.volume)) {
        this.volume = data().deepCopy(fields()[6].schema(), other.volume);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing StockData instance
     * @param other The existing instance to copy.
     */
    private Builder(org.aghersi.StockData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.open)) {
        this.open = data().deepCopy(fields()[1].schema(), other.open);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.high)) {
        this.high = data().deepCopy(fields()[2].schema(), other.high);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.low)) {
        this.low = data().deepCopy(fields()[3].schema(), other.low);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.close)) {
        this.close = data().deepCopy(fields()[4].schema(), other.close);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.adj_close)) {
        this.adj_close = data().deepCopy(fields()[5].schema(), other.adj_close);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.volume)) {
        this.volume = data().deepCopy(fields()[6].schema(), other.volume);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.date = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder clearDate() {
      date = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'open' field.
      * @return The value.
      */
    public java.lang.Double getOpen() {
      return open;
    }


    /**
      * Sets the value of the 'open' field.
      * @param value The value of 'open'.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder setOpen(java.lang.Double value) {
      validate(fields()[1], value);
      this.open = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'open' field has been set.
      * @return True if the 'open' field has been set, false otherwise.
      */
    public boolean hasOpen() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'open' field.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder clearOpen() {
      open = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'high' field.
      * @return The value.
      */
    public java.lang.Double getHigh() {
      return high;
    }


    /**
      * Sets the value of the 'high' field.
      * @param value The value of 'high'.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder setHigh(java.lang.Double value) {
      validate(fields()[2], value);
      this.high = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'high' field has been set.
      * @return True if the 'high' field has been set, false otherwise.
      */
    public boolean hasHigh() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'high' field.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder clearHigh() {
      high = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'low' field.
      * @return The value.
      */
    public java.lang.Double getLow() {
      return low;
    }


    /**
      * Sets the value of the 'low' field.
      * @param value The value of 'low'.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder setLow(java.lang.Double value) {
      validate(fields()[3], value);
      this.low = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'low' field has been set.
      * @return True if the 'low' field has been set, false otherwise.
      */
    public boolean hasLow() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'low' field.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder clearLow() {
      low = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'close' field.
      * @return The value.
      */
    public java.lang.Double getClose() {
      return close;
    }


    /**
      * Sets the value of the 'close' field.
      * @param value The value of 'close'.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder setClose(java.lang.Double value) {
      validate(fields()[4], value);
      this.close = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'close' field has been set.
      * @return True if the 'close' field has been set, false otherwise.
      */
    public boolean hasClose() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'close' field.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder clearClose() {
      close = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'adj_close' field.
      * @return The value.
      */
    public java.lang.Double getAdjClose() {
      return adj_close;
    }


    /**
      * Sets the value of the 'adj_close' field.
      * @param value The value of 'adj_close'.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder setAdjClose(java.lang.Double value) {
      validate(fields()[5], value);
      this.adj_close = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'adj_close' field has been set.
      * @return True if the 'adj_close' field has been set, false otherwise.
      */
    public boolean hasAdjClose() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'adj_close' field.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder clearAdjClose() {
      adj_close = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'volume' field.
      * @return The value.
      */
    public java.lang.Double getVolume() {
      return volume;
    }


    /**
      * Sets the value of the 'volume' field.
      * @param value The value of 'volume'.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder setVolume(java.lang.Double value) {
      validate(fields()[6], value);
      this.volume = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'volume' field has been set.
      * @return True if the 'volume' field has been set, false otherwise.
      */
    public boolean hasVolume() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'volume' field.
      * @return This builder.
      */
    public org.aghersi.StockData.Builder clearVolume() {
      volume = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockData build() {
      try {
        StockData record = new StockData();
        record.date = fieldSetFlags()[0] ? this.date : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.open = fieldSetFlags()[1] ? this.open : (java.lang.Double) defaultValue(fields()[1]);
        record.high = fieldSetFlags()[2] ? this.high : (java.lang.Double) defaultValue(fields()[2]);
        record.low = fieldSetFlags()[3] ? this.low : (java.lang.Double) defaultValue(fields()[3]);
        record.close = fieldSetFlags()[4] ? this.close : (java.lang.Double) defaultValue(fields()[4]);
        record.adj_close = fieldSetFlags()[5] ? this.adj_close : (java.lang.Double) defaultValue(fields()[5]);
        record.volume = fieldSetFlags()[6] ? this.volume : (java.lang.Double) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockData>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockData>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockData>
    READER$ = (org.apache.avro.io.DatumReader<StockData>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.date);

    if (this.open == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeDouble(this.open);
    }

    if (this.high == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeDouble(this.high);
    }

    if (this.low == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeDouble(this.low);
    }

    if (this.close == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeDouble(this.close);
    }

    if (this.adj_close == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeDouble(this.adj_close);
    }

    if (this.volume == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeDouble(this.volume);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.open = null;
      } else {
        this.open = in.readDouble();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.high = null;
      } else {
        this.high = in.readDouble();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.low = null;
      } else {
        this.low = in.readDouble();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.close = null;
      } else {
        this.close = in.readDouble();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.adj_close = null;
      } else {
        this.adj_close = in.readDouble();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.volume = null;
      } else {
        this.volume = in.readDouble();
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.date = in.readString(this.date instanceof Utf8 ? (Utf8)this.date : null);
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.open = null;
          } else {
            this.open = in.readDouble();
          }
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.high = null;
          } else {
            this.high = in.readDouble();
          }
          break;

        case 3:
          if (in.readIndex() != 0) {
            in.readNull();
            this.low = null;
          } else {
            this.low = in.readDouble();
          }
          break;

        case 4:
          if (in.readIndex() != 0) {
            in.readNull();
            this.close = null;
          } else {
            this.close = in.readDouble();
          }
          break;

        case 5:
          if (in.readIndex() != 0) {
            in.readNull();
            this.adj_close = null;
          } else {
            this.adj_close = in.readDouble();
          }
          break;

        case 6:
          if (in.readIndex() != 0) {
            in.readNull();
            this.volume = null;
          } else {
            this.volume = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










